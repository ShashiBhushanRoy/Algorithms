Given an undirected, connected and weighted graph G(V, E) with V number of vertices (which are numbered from 0 to V-1) and E number of edges.
Find and print the shortest distance from the source vertex (i.e. Vertex 0) to all other vertices (including source vertex also) using Dijkstra's Algorithm.
Print the ith vertex number and the distance from source in one line separated by space. Print different vertices in different lines.
Note : Order of vertices in output doesn't matter.
Input Format :
Line 1: Two Integers V and E (separated by space)
Next E lines : Three integers ei, ej and wi, denoting that there exists an edge between vertex ei and vertex ej with weight wi (separated by space)
Output Format :
In different lines, ith vertex number and its distance from source (separated by space)
Constraints :
2 <= V, E <= 10^5
Sample Input 1 :
4 4
0 1 3
0 3 5
1 2 1
2 3 8
Sample Output 1 :
0 0
1 3
2 4
3 5


import java.util.Scanner;

public class Solution {
    private static int findMinVertex(boolean[] visited, int[] distance) {
        int minVertex=-1;
        for(int i=0;i<visited.length;i++)
        {
            if(!visited[i] && (minVertex == -1 || distance[i] < distance[minVertex]))
            {
                minVertex=i;
            }
        }
        return minVertex;
    }
    public static void dijkstra(int[][] adjMatrix)
    {
        int n=adjMatrix.length;
        boolean visited[]=new boolean[n];
        int distance[]=new int[n];
        distance[0]=0;
        for(int i=1;i<n;i++)
        {
            distance[i]=Integer.MAX_VALUE;
        }
        for(int i=0;i<n-1;i++)
        {
            int minVertex=findMinVertex(visited, distance);
            visited[minVertex]=true;
            for(int j=0;j<n;j++)
            {
                if(adjMatrix[minVertex][j] > 0 && !visited[j] && adjMatrix[minVertex][j] < Integer.MAX_VALUE)
                {
                    //Unvisited of neighbor of minVertex
                    // Calculate distance to reach j from source via minVertex
                    int newDist=distance[minVertex] + adjMatrix[minVertex][j];
                    if(newDist < distance[j])
                    {
                        distance[j]=newDist;
                    }

                }
            }
        }
        for(int i=0;i<n;i++)
        {
            System.out.println(i +" "+distance[i]);
        }
    }
    public static void main(String[] args) {
        Scanner s = new Scanner(System.in);
        int V = s.nextInt();
        int E = s.nextInt();

        /* Write Your Code Here
		 * Complete the Rest of the Program
		 * You have to take input and print the output yourself
		 */
        int adjMatrix[][]=new int[V][V];
        for(int i=0;i<E;i++)
        {
            int v1=s.nextInt();
            int v2=s.nextInt();
            int weight=s.nextInt();
            adjMatrix[v1][v2]=weight;
            adjMatrix[v2][v1]=weight;
        }
        dijkstra(adjMatrix);
    }
}
